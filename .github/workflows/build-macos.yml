name: macOS

# Run CI only when a release is created, on changes to main branch, or any PR
# to main.
on:
  push:
    branches: main

  pull_request:
    branches: main

  # the github release drafter can call this workflow
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-macos
  cancel-in-progress: true

jobs:
  deps:
    name: ${{ matrix.macarch }} deps
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # make arm64 deps and x86_64 deps
        include:
          - { macarch: arm64, os: macos-15 }
          - { macarch: x86_64, os: macos-15 }

    steps:
      - uses: actions/checkout@v5.0.0

      - name: Test for Mac Deps cache hit
        id: macdep-cache
        uses: actions/cache@v4.3.0
        with:
          path: ${{ github.workspace }}/pygame_mac_deps_${{ matrix.macarch }}
          # The hash of all files in buildconfig manylinux-build and macdependencies is
          # the key to the cache. If anything changes here, the deps are built again
          key: macdep-${{ hashFiles('buildconfig/manylinux-build/**') }}-${{ hashFiles('buildconfig/macdependencies/*.sh') }}-${{ matrix.macarch }}-${{ matrix.os }}
          lookup-only: true

      # build mac deps on cache miss
      - name: Build Mac Deps
        if: steps.macdep-cache.outputs.cache-hit != 'true'
        run: |
          export MAC_ARCH="${{ matrix.macarch }}"
          brew install coreutils
          cd buildconfig/macdependencies
          bash ./build_mac_deps.sh

      # Uncomment when you want to manually verify the deps by downloading them
      # - name: Upload Mac deps
      #   uses: actions/upload-artifact@v5
      #   with:
      #     name: pygame-mac-deps-${{ matrix.macarch }}
      #     path: ${{ github.workspace }}/pygame_mac_deps_${{ matrix.macarch }}

  build:
    name: universal2
    needs: deps
    runs-on: macos-15

    env:
      # Our deployment target is 10.11, even on universal2. Technically this
      # is a lie for the arm64 part of the wheel (where the deployment target is
      # higher, at 11.0). However this is fine because with this hack our wheels
      # are acceptable on old intel macs.
      # cibuildwheel can internally raise this to a higher version if the python
      # version its building for requires it.
      MACOSX_DEPLOYMENT_TARGET: '10.11'

      CIBW_ARCHS: universal2

      # Setup macOS dependencies
      CIBW_BEFORE_ALL: |
        cd buildconfig/macdependencies
        bash ./install_mac_deps.sh
        mv ${{ github.workspace }}/pygame_mac_deps ${{ github.workspace }}/deps_moved

      # To remove any speculations about the wheel not being self-contained
      CIBW_BEFORE_BUILD: mv ${{ github.workspace }}/deps_moved ${{ github.workspace }}/pygame_mac_deps
      CIBW_BEFORE_TEST: mv ${{ github.workspace }}/pygame_mac_deps ${{ github.workspace }}/deps_moved

    steps:
      - uses: actions/checkout@v5.0.0

      - name: pip cache
        uses: actions/cache@v4.3.0
        with:
          path: ~/Library/Caches/pip  # This cache path is only right on mac
          key: pip-cache-macos

      - name: Fetch Mac deps (x86_64)
        uses: actions/cache@v4.3.0
        with:
          path: ${{ github.workspace }}/pygame_mac_deps_x86_64
          key: macdep-${{ hashFiles('buildconfig/manylinux-build/**') }}-${{ hashFiles('buildconfig/macdependencies/*.sh') }}-x86_64
          fail-on-cache-miss: true

      - name: Fetch Mac deps (arm64)
        uses: actions/cache@v4.3.0
        with:
          path: ${{ github.workspace }}/pygame_mac_deps_arm64
          key: macdep-${{ hashFiles('buildconfig/manylinux-build/**') }}-${{ hashFiles('buildconfig/macdependencies/*.sh') }}-arm64
          fail-on-cache-miss: true

      - name: Install uv for speed
        uses: astral-sh/setup-uv@v7
        with:
          version: "0.9.2"

      - name: Build and test wheels
        uses: pypa/cibuildwheel@v3.2.1

      - uses: actions/upload-artifact@v5
        with:
          name: pygame-wheels-macos
          path: ./wheelhouse/*.whl
          compression-level: 0  # wheels are already zip files, no need for more compression
