name: ManyLinux

# Run CI only when a release is created, on changes to main branch, or any PR
# to main.
on:
  push:
    branches: main

  pull_request:
    branches: main

  # the github release drafter can call this workflow
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-manylinux
  cancel-in-progress: true

jobs:
  build:
    name: ${{ matrix.arch }}
    runs-on: ${{ matrix.arch == 'aarch64' && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false  # if a particular matrix build fails, don't skip the rest
      matrix:
        arch: [x86_64, i686, aarch64]

    env:
      CIBW_ARCHS: ${{ matrix.arch }}

    steps:
    - uses: actions/checkout@v4.2.2

    - name: Log in to the Container registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Inspect image, skip build if image exists
      id: inspect
      continue-on-error: true
      run: docker manifest inspect ghcr.io/${{ github.repository }}_${{ matrix.arch }}:${{ hashFiles('buildconfig/manylinux-build/**') }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804
      with:
        images: ghcr.io/${{ github.repository }}_${{ matrix.arch }}
        tags: type=raw,value=${{ hashFiles('buildconfig/manylinux-build/**') }}

    - name: Build and push Docker image
      if: steps.inspect.outcome == 'failure'
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
      with:
        context: ${{ github.workspace }}/buildconfig/manylinux-build/docker_base
        file: ${{ github.workspace }}/buildconfig/manylinux-build/docker_base/Dockerfile-${{ matrix.arch }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Build and test wheels
      env:
        # set custom pygame images
        CIBW_MANYLINUX_X86_64_IMAGE: ghcr.io/${{ github.repository }}_x86_64:${{ steps.meta.outputs.version }}
        CIBW_MANYLINUX_PYPY_X86_64_IMAGE: ghcr.io/${{ github.repository }}_x86_64:${{ steps.meta.outputs.version }}
        CIBW_MANYLINUX_I686_IMAGE: ghcr.io/${{ github.repository }}_i686:${{ steps.meta.outputs.version }}
        CIBW_MANYLINUX_PYPY_I686_IMAGE: ghcr.io/${{ github.repository }}_i686:${{ steps.meta.outputs.version }}
        CIBW_MANYLINUX_AARCH64_IMAGE: ghcr.io/${{ github.repository }}_aarch64:${{ steps.meta.outputs.version }}
        CIBW_MANYLINUX_PYPY_AARCH64_IMAGE: ghcr.io/${{ github.repository }}_aarch64:${{ steps.meta.outputs.version }}

      uses: pypa/cibuildwheel@v2.23.2

    # We upload the generated files under github actions assets
    - name: Upload dist
      uses: actions/upload-artifact@v4
      with:
        name: pygame-wheels-manylinux-${{ matrix.arch }}
        path: ./wheelhouse/*.whl
        compression-level: 0  # wheels are already zip files, no need for more compression
