from typing import Optional, Dict, final

from pygame.typing import FileLike

def load(filename: FileLike, namehint: Optional[str] = "") -> None: ...
def unload() -> None: ...
def play(loops: int = 0, start: float = 0.0, fade_ms: int = 0) -> None: ...
def rewind() -> None: ...
def stop() -> None: ...
def pause() -> None: ...
def unpause() -> None: ...
def fadeout(time: int, /) -> None: ...
def set_volume(volume: float, /) -> None: ...
def get_volume() -> float: ...
def get_busy() -> bool: ...
def set_pos(pos: float, /) -> None: ...
def get_pos() -> int: ...
def queue(filename: FileLike, namehint: str = "", loops: int = 0) -> None: ...
def set_endevent(event_type: int, /) -> None: ...
def get_endevent() -> int: ...
def get_metadata(
    filename: Optional[FileLike] = None, namehint: str = ""
) -> Dict[str, str]: ...

@final
class Music:
    def __init__(self, filename: FileLike, namehint: str = "") -> None: ...
    def play(
        self, loops: int = 0, startpos: float = 0.0, fade_in: float = 0.0
    ) -> None: ...
    def stop(self) -> None: ...
    def rewind(self) -> None: ...

    fadein : float

    @property
    def title(self) -> str: ...
    @property
    def artist(self) -> str: ...
    @property
    def album(self) -> str: ...
    @property
    def copyright(self) -> str: ...
    @property
    def position(self) -> float: ...
    @position.setter
    def position(self, value: float) -> None: ...
    @property
    def duration(self) -> float: ...
    @property
    def paused(self) -> bool: ...
    @property
    def volume(self) -> float: ...
    @volume.setter
    def volume(self, value: float) -> None: ...
    @property
    def ended(self) -> bool: ...
    @property
    def fadeout(self) -> float: ...
    @fadeout.setter
    def fadeout(self, value: float) -> None: ...
