from typing import Iterable, Optional, Tuple, Union, final
from pygame.surface import Surface
from pygame.locals import WINDOWPOS_UNDEFINED

def get_grabbed_window() -> Optional[Window]: ...
@final
class Window:
    def __init__(
        self,
        title: str = "pygame window",
        size: Iterable[int] = (640, 480),
        position: Union[int, Iterable[int]] = WINDOWPOS_UNDEFINED,
        **flags: bool
    ) -> None: ...
    def destroy(self) -> None: ...
    def set_windowed(self) -> None: ...
    def set_fullscreen(self, desktop: bool = False) -> None: ...
    def focus(self, input_only: bool = False) -> None: ...
    def hide(self) -> None: ...
    def show(self) -> None: ...
    def restore(self) -> None: ...
    def maximize(self) -> None: ...
    def minimize(self) -> None: ...
    def set_modal_for(self, parent: Window) -> None: ...
    def set_icon(self, icon: Surface) -> None: ...

    @property
    def grab(self) -> bool: ...
    @grab.setter
    def grab(self, value: bool) -> None: ...

    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> None: ...

    @property
    def resizable(self) -> bool: ...
    @resizable.setter
    def resizable(self, value: bool) -> None: ...

    @property
    def borderless(self) -> bool: ...
    @borderless.setter
    def borderless(self, value: bool) -> None: ...

    @property
    def always_on_top(self) -> bool: ...
    @always_on_top.setter
    def always_on_top(self, value: bool) -> None: ...

    @property
    def relative_mouse(self) -> bool: ...
    @relative_mouse.setter
    def relative_mouse(self, value: bool) -> None: ...

    @property
    def id(self) -> int: ...
    @id.setter
    def id(self, value: int) -> None: ...

    @property
    def size(self) -> Tuple[int]: ...
    @size.setter
    def size(self, value: Iterable[int]) -> None: ...

    @property
    def position(self) -> Tuple[int]: ...
    @position.setter
    def position(self, value: Union[int, Iterable[int]]) -> None: ...

    @property
    def opacity(self) -> float: ...
    @opacity.setter
    def opacity(self, value: float) -> None: ...

    @property
    def display_index(self) -> int: ...
    @display_index.setter
    def display_index(self, value: int) -> None: ...

    @classmethod
    def from_display_module(cls) -> Window: ...
