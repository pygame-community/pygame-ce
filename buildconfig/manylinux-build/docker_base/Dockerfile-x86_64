FROM quay.io/pypa/manylinux2014_x86_64
ENV MAKEFLAGS="-j 2"
ENV PG_DEP_PREFIX="/usr/local"

# Set up repoforge
COPY RPM-GPG-KEY.dag.txt /tmp/
RUN rpm --import /tmp/RPM-GPG-KEY.dag.txt

#ENV RPMFORGE_FILE "rpmforge-release-0.5.3-1.el5.rf.x86_64.rpm"
#ADD "https://repoforge.cu.be/redhat/el5/en/x86_64/dag/RPMS/${RPMFORGE_FILE}" /tmp/${RPMFORGE_FILE}

#RUN rpm -i /tmp/${RPMFORGE_FILE}

# systemd is needed for udev (for SDL and pulse)
# it's okay to install X11 and friends from outdated centos repos because newer
# libs are dynamically loaded at runtime
RUN yum install -y zlib-devel dbus-devel fontconfig xz systemd-devel \
  libcap-devel libxkbcommon-devel \
  libX11-devel libXext-devel libXrandr-devel libXcursor-devel libXfixes-devel \
  libXi-devel libXScrnSaver-devel

# With this we
# 1) Force install prefix to $PG_DEP_PREFIX
# 2) use lib directory within $PG_DEP_PREFIX (and not lib64)
# 3) make release binaries
# 4) build shared libraries
ENV PG_BASE_CMAKE_FLAGS="-DCMAKE_INSTALL_PREFIX=$PG_DEP_PREFIX \
  -DCMAKE_INSTALL_LIBDIR:PATH=lib \
  -DCMAKE_BUILD_TYPE=Release \
  -DBUILD_SHARED_LIBS=true"

ENV PG_BASE_CONFIGURE_FLAGS="--prefix=$PG_DEP_PREFIX"

ENV PG_BASE_MESON_FLAGS="--prefix=$PG_DEP_PREFIX \
  -Dlibdir=lib \
  -Dbuildtype=release \
  -Ddefault_library=shared"

# remember to keep this updated when we drop 3.11 support
ENV PATH="/opt/python/cp311-cp311/bin:$PATH"

ADD pkg-config /pkg-config_build/
RUN ["bash", "/pkg-config_build/build-pkg-config.sh"]

ADD buildtools /buildtools/
RUN ["bash", "/buildtools/install.sh"]

ADD libffi /libffi_build/
RUN ["bash", "/libffi_build/build-libffi.sh"]

ADD libxml2 /libxml2_build/
RUN ["bash", "/libxml2_build/build-libxml2.sh"]

ADD wayland /wayland_build/
RUN ["bash", "/wayland_build/build-wayland.sh"]

ADD libdecor /libdecor_build/
RUN ["bash", "/libdecor_build/build-libdecor.sh"]

ADD xorg/macros /xorg_build/macros/
RUN ["bash", "/xorg_build/macros/build-macros.sh"]

ADD xorg/libpciaccess /xorg_build/libpciaccess/
RUN ["bash", "/xorg_build/libpciaccess/build-libpciaccess.sh"]

ADD mesa/libdrm /mesa_build/libdrm/
RUN ["bash", "/mesa_build/libdrm/build-libdrm.sh"]

ADD xorg/libxshmfence /xorg_build/libxshmfence/
RUN ["bash", "/xorg_build/libxshmfence/build-libxshmfence.sh"]

ADD mesa/glslang /mesa_build/glslang/
RUN ["bash", "/mesa_build/glslang/build-glslang.sh"]

ADD mesa/mako /mesa_build/mako/
RUN ["bash", "/mesa_build/mako/build-mako.sh"]

ADD mesa/flex /mesa_build/flex/
RUN ["bash", "/mesa_build/flex/build-flex.sh"]

ADD mesa/mesa /mesa_build/mesa/
RUN ["bash", "/mesa_build/mesa/build-mesa.sh"]

#ADD zlib-ng /zlib-ng_build/
#RUN ["bash", "/zlib-ng_build/build-zlib-ng.sh"]

ADD libjpegturbo /libjpegturbo_build/
RUN ["bash", "/libjpegturbo_build/build-jpeg-turbo.sh"]

ADD libpng /libpng_build/
RUN ["bash", "/libpng_build/build-png.sh"]

ADD libwebp /webp_build/
RUN ["bash", "/webp_build/build-webp.sh"]

ADD libtiff /libtiff_build/
RUN ["bash", "/libtiff_build/build-tiff.sh"]

ADD brotli /brotli_build/
RUN ["bash", "/brotli_build/build-brotli.sh"]

#ADD bzip2 /bzip2_build/
#RUN ["bash", "/bzip2_build/build-bzip2.sh"]

ADD freetype /freetype_build/
RUN ["bash", "/freetype_build/build-freetype.sh"]

RUN ["rm", "-f", "/lib64/libasound*"]
RUN ["rm", "-f", "/lib/libasound*"]
ADD alsa /alsa_build/
RUN ["bash", "/alsa_build/build-alsa.sh"]

ADD ogg /ogg_build/
RUN ["bash", "/ogg_build/build-ogg.sh"]

ADD mpg123 /mpg123_build/
RUN ["bash", "/mpg123_build/build-mpg123.sh"]

ADD flac /flac_build/
RUN ["bash", "/flac_build/build-flac.sh"]

ADD opus /opus_build/
RUN ["bash", "/opus_build/build-opus.sh"]

ADD sndfile /sndfile_build/
RUN ["bash", "/sndfile_build/build-sndfile.sh"]

ADD pulseaudio /pulseaudio_build/
RUN ["bash", "/pulseaudio_build/build-pulseaudio.sh"]

ADD libpipewire /libpipewire_build/
RUN ["bash", "/libpipewire_build/build-libpipewire.sh"]

ADD libxmp /libxmp_build/
RUN ["bash", "/libxmp_build/build-libxmp.sh"]

# explicit install not needed anymore
# ADD gettext /gettext_build/
# RUN ["bash", "/gettext_build/build-gettext.sh"]

ADD glib /glib_build/
RUN ["bash", "/glib_build/build-glib.sh"]

ADD fluidsynth /fluidsynth_build/
RUN ["bash", "/fluidsynth_build/build-fluidsynth.sh"]

ADD wavpack /wavpack_build/
RUN ["bash", "/wavpack_build/build-wavpack.sh"]

ADD libsamplerate /libsamplerate_build/
RUN ["bash", "/libsamplerate_build/build-libsamplerate.sh"]

ADD sdl_libs /sdl_build/
RUN ["bash", "/sdl_build/build-sdl2-libs.sh"]


ENV MAKEFLAGS=

ADD portmidi /portmidi_build/
RUN ["bash", "/portmidi_build/build-portmidi.sh"]

# run strip on built libraries
COPY strip-lib-so-files.sh /tmp/
RUN source /tmp/strip-lib-so-files.sh
