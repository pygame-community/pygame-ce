/* Auto generated file: with makeref.py .  Docs go in docs/reST/ref/ . */
#define DOC_MIDI "pygame module for interacting with midi input and output."
#define DOC_MIDI_INIT "init() -> None\ninitialize the midi module"
#define DOC_MIDI_QUIT "quit() -> None\nuninitialize the midi module"
#define DOC_MIDI_GETINIT "get_init() -> bool\nreturns True if the midi module is currently initialized"
#define DOC_MIDI_INPUT "Input(device_id) -> None\nInput(device_id, buffer_size) -> None\nInput is used to get midi input from midi devices."
#define DOC_MIDI_INPUT_CLOSE "close() -> None\ncloses a midi stream, flushing any pending buffers."
#define DOC_MIDI_INPUT_POLL "poll() -> bool\nreturns True if there's data, or False if not."
#define DOC_MIDI_INPUT_READ "read(num_events) -> midi_event_list\nreads num_events midi events from the buffer."
#define DOC_MIDI_OUTPUT "Output(device_id) -> None\nOutput(device_id, latency=0) -> None\nOutput(device_id, buffer_size=256) -> None\nOutput(device_id, latency, buffer_size) -> None\nOutput is used to send midi to an output device"
#define DOC_MIDI_OUTPUT_ABORT "abort() -> None\nterminates outgoing messages immediately"
#define DOC_MIDI_OUTPUT_CLOSE "close() -> None\ncloses a midi stream, flushing any pending buffers."
#define DOC_MIDI_OUTPUT_NOTEOFF "note_off(note, velocity=None, channel=0) -> None\nturns a midi note off (note must be on)"
#define DOC_MIDI_OUTPUT_NOTEON "note_on(note, velocity=None, channel=0) -> None\nturns a midi note on (note must be off)"
#define DOC_MIDI_OUTPUT_SETINSTRUMENT "set_instrument(instrument_id, channel=0) -> None\nselect an instrument, with a value between 0 and 127"
#define DOC_MIDI_OUTPUT_PITCHBEND "set_instrument(value=0, channel=0) -> None\nmodify the pitch of a channel."
#define DOC_MIDI_OUTPUT_WRITE "write(data) -> None\nwrites a list of midi data to the Output"
#define DOC_MIDI_OUTPUT_WRITESHORT "write_short(status) -> None\nwrite_short(status, data1=0, data2=0) -> None\nwrites up to 3 bytes of midi data to the Output"
#define DOC_MIDI_OUTPUT_WRITESYSEX "write_sys_ex(when, msg) -> None\nwrites a timestamped system-exclusive midi message."
#define DOC_MIDI_GETCOUNT "get_count() -> num_devices\ngets the number of devices."
#define DOC_MIDI_GETDEFAULTINPUTID "get_default_input_id() -> default_id\ngets default input device number"
#define DOC_MIDI_GETDEFAULTOUTPUTID "get_default_output_id() -> default_id\ngets default output device number"
#define DOC_MIDI_GETDEVICEINFO "get_device_info(an_id) -> (interf, name, input, output, opened)\nget_device_info(an_id) -> None\nreturns information about a midi device"
#define DOC_MIDI_MIDIS2EVENTS "midis2events(midi_events, device_id) -> [Event, ...]\nconverts midi events to pygame events"
#define DOC_MIDI_TIME "time() -> time\nreturns the current time in ms of the PortMidi timer"
#define DOC_MIDI_FREQUENCYTOMIDI "frequency_to_midi(midi_note) -> midi_note\nConverts a frequency into a MIDI note. Rounds to the closest midi note."
#define DOC_MIDI_MIDITOFREQUENCY "midi_to_frequency(midi_note) -> frequency\nConverts a midi note to a frequency."
#define DOC_MIDI_MIDITOANSINOTE "midi_to_ansi_note(midi_note) -> ansi_note\nReturns the Ansi Note name for a midi number."
#define DOC_MIDI_MIDIEXCEPTION "MidiException(errno) -> None\nexception that pygame.midi functions and classes can raise"
