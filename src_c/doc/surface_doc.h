/* Auto generated file: with makeref.py .  Docs go in docs/reST/ref/ . */
#define DOC_SURFACE "Surface((width, height), flags=0, depth=0, masks=None) -> Surface\nSurface((width, height), flags=0, Surface) -> Surface\npygame object for representing images"
#define DOC_SURFACE_BLIT "blit(source, dest, area=None, special_flags=0) -> Rect\ndraw one image onto another"
#define DOC_SURFACE_BLITS "blits(blit_sequence=((source, dest), ...), doreturn=1) -> [Rect, ...] or None\nblits(((source, dest, area), ...)) -> [Rect, ...]\nblits(((source, dest, area, special_flags), ...)) -> [Rect, ...]\ndraw many images onto another"
#define DOC_SURFACE_FBLITS "fblits(blit_sequence=((source, dest), ...), special_flags=0) -> None\ndraw many surfaces onto the calling surface at their corresponding location and the same special_flags"
#define DOC_SURFACE_CONVERT "convert(Surface=None) -> Surface\nconvert(depth, flags=0) -> Surface\nconvert(masks, flags=0) -> Surface\nchange the pixel format of an image"
#define DOC_SURFACE_CONVERTALPHA "convert_alpha(Surface) -> Surface\nconvert_alpha() -> Surface\nchange the pixel format of an image including per pixel alphas"
#define DOC_SURFACE_COPY "copy() -> Surface\ncreate a new copy of a Surface"
#define DOC_SURFACE_FILL "fill(color, rect=None, special_flags=0) -> Rect\nfill Surface with a solid color"
#define DOC_SURFACE_SCROLL "scroll(dx=0, dy=0) -> None\nShift the surface image in place"
#define DOC_SURFACE_SETCOLORKEY "set_colorkey(Color, flags=0) -> None\nset_colorkey(None) -> None\nSet the transparent colorkey"
#define DOC_SURFACE_GETCOLORKEY "get_colorkey() -> RGB or None\nGet the current transparent colorkey"
#define DOC_SURFACE_SETALPHA "set_alpha(value, flags=0) -> None\nset_alpha(None) -> None\nset the alpha value for the full Surface image"
#define DOC_SURFACE_GETALPHA "get_alpha() -> int_value\nget the current Surface transparency value"
#define DOC_SURFACE_LOCK "lock() -> None\nlock the Surface memory for pixel access"
#define DOC_SURFACE_UNLOCK "unlock() -> None\nunlock the Surface memory from pixel access"
#define DOC_SURFACE_MUSTLOCK "mustlock() -> bool\ntest if the Surface requires locking"
#define DOC_SURFACE_GETLOCKED "get_locked() -> bool\ntest if the Surface is current locked"
#define DOC_SURFACE_GETLOCKS "get_locks() -> tuple\nGets the locks for the Surface"
#define DOC_SURFACE_GETAT "get_at((x, y)) -> Color\nget the color value at a single pixel"
#define DOC_SURFACE_SETAT "set_at((x, y), Color) -> None\nset the color value for a single pixel"
#define DOC_SURFACE_GETATMAPPED "get_at_mapped((x, y)) -> Color\nget the mapped color value at a single pixel"
#define DOC_SURFACE_GETPALETTE "get_palette() -> [RGB, RGB, RGB, ...]\nget the color index palette for an 8-bit Surface"
#define DOC_SURFACE_GETPALETTEAT "get_palette_at(index) -> RGB\nget the color for a single entry in a palette"
#define DOC_SURFACE_SETPALETTE "set_palette([RGB, RGB, RGB, ...]) -> None\nset the color palette for an 8-bit Surface"
#define DOC_SURFACE_SETPALETTEAT "set_palette_at(index, RGB) -> None\nset the color for a single index in an 8-bit Surface palette"
#define DOC_SURFACE_MAPRGB "map_rgb(Color) -> mapped_int\nconvert a color into a mapped color value"
#define DOC_SURFACE_UNMAPRGB "unmap_rgb(mapped_int) -> Color\nconvert a mapped integer color value into a Color"
#define DOC_SURFACE_SETCLIP "set_clip(rect) -> None\nset_clip(None) -> None\nset the current clipping area of the Surface"
#define DOC_SURFACE_GETCLIP "get_clip() -> Rect\nget the current clipping area of the Surface"
#define DOC_SURFACE_SUBSURFACE "subsurface(Rect) -> Surface\ncreate a new surface that references its parent"
#define DOC_SURFACE_GETPARENT "get_parent() -> Surface\nfind the parent of a subsurface"
#define DOC_SURFACE_GETABSPARENT "get_abs_parent() -> Surface\nfind the top level parent of a subsurface"
#define DOC_SURFACE_GETOFFSET "get_offset() -> (x, y)\nfind the position of a child subsurface inside a parent"
#define DOC_SURFACE_GETABSOFFSET "get_abs_offset() -> (x, y)\nfind the absolute position of a child subsurface inside its top level parent"
#define DOC_SURFACE_GETSIZE "get_size() -> (width, height)\nget the dimensions of the Surface"
#define DOC_SURFACE_GETWIDTH "get_width() -> width\nget the width of the Surface"
#define DOC_SURFACE_GETHEIGHT "get_height() -> height\nget the height of the Surface"
#define DOC_SURFACE_GETRECT "get_rect(**kwargs) -> Rect\nget the rectangular area of the Surface"
#define DOC_SURFACE_GETBITSIZE "get_bitsize() -> int\nget the bit depth of the Surface pixel format"
#define DOC_SURFACE_GETBYTESIZE "get_bytesize() -> int\nget the bytes used per Surface pixel"
#define DOC_SURFACE_GETFLAGS "get_flags() -> int\nget the additional flags used for the Surface"
#define DOC_SURFACE_GETPITCH "get_pitch() -> int\nget the number of bytes used per Surface row"
#define DOC_SURFACE_GETMASKS "get_masks() -> (R, G, B, A)\nthe bitmasks needed to convert between a color and a mapped integer"
#define DOC_SURFACE_SETMASKS "set_masks((r,g,b,a)) -> None\nset the bitmasks needed to convert between a color and a mapped integer"
#define DOC_SURFACE_GETSHIFTS "get_shifts() -> (R, G, B, A)\nthe bit shifts needed to convert between a color and a mapped integer"
#define DOC_SURFACE_SETSHIFTS "set_shifts((r,g,b,a)) -> None\nsets the bit shifts needed to convert between a color and a mapped integer"
#define DOC_SURFACE_GETLOSSES "get_losses() -> (R, G, B, A)\nthe significant bits used to convert between a color and a mapped integer"
#define DOC_SURFACE_GETBOUNDINGRECT "get_bounding_rect(min_alpha = 1) -> Rect\nfind the smallest rect containing data"
#define DOC_SURFACE_GETVIEW "get_view(<kind>='2') -> BufferProxy\nreturn a buffer view of the Surface's pixels."
#define DOC_SURFACE_GETBUFFER "get_buffer() -> BufferProxy\nacquires a buffer object for the pixels of the Surface."
#define DOC_SURFACE_PIXELSADDRESS "_pixels_address -> int\npixel buffer address"
#define DOC_SURFACE_PREMULALPHA "premul_alpha() -> Surface\nreturns a copy of the surface with the RGB channels pre-multiplied by the alpha channel."
