/* Auto generated file: with makeref.py .  Docs go in docs/reST/ref/ . */
#define DOC_SDL2VIDEO "Experimental pygame module for porting new SDL video systems"
#define DOC_SDL2_VIDEO_MESSAGEBOX "messagebox(title, message, window=None, info=False, warn=False, buttons=('OK',), return_button=0, escape_button=0)\ncreate a native GUI message box"
#define DOC_SDL2_VIDEO_GETDRIVERS "get_drivers() -> RendererDriverInfo\nGet info about the rendering drivers available for Renderer objects"
#define DOC_SDL2_VIDEO_RENDERERDRIVERINFO "pygame object encapsulating Renderer driver information"
#define DOC_SDL2_VIDEO_WINDOW "Window(title="pygame", size=(640, 480), position=None, fullscreen=False, fullscreen_desktop=False, **kwargs) -> Window\npygame object that represents a window"
#define DOC_SDL2_VIDEO_WINDOW_FROMDISPLAYMODULE "from_display_module() -> Window\nCreate a Window object using window data from display module"
#define DOC_SDL2_VIDEO_WINDOW_GETGRAB "get_grab() -> bool\nGet the window's input grab state"
#define DOC_SDL2_VIDEO_WINDOW_SETGRAB "set_grab(grabbed) -> None\nSet the window's input grab state"
#define DOC_SDL2_VIDEO_WINDOW_GETRELATIVEMOUSEMODE "get_relative_mouse_mode() -> bool\nGet the window's relative mouse mode state"
#define DOC_SDL2_VIDEO_WINDOW_SETRELATIVEMOUSEMODE "set_relative_mouse_mode(enabled) -> None\nSet the window's relative mouse mode state"
#define DOC_SDL2_VIDEO_WINDOW_SETWINDOWED "set_windowed() -> None\nEnable windowed mode (exit fullscreen)"
#define DOC_SDL2_VIDEO_WINDOW_SETFULLSCREEN "set_fullscreen(desktop=False) -> None\nEnter fullscreen"
#define DOC_SDL2_VIDEO_WINDOW_GETTITLE "get_title() -> str\nGet the window title"
#define DOC_SDL2_VIDEO_WINDOW_SETTITLE "set_title() -> None\nSet the window title"
#define DOC_SDL2_VIDEO_WINDOW_DESTROY "destroy() -> None\nDestroy the window"
#define DOC_SDL2_VIDEO_WINDOW_HIDE "hide() -> None\nHide the window"
#define DOC_SDL2_VIDEO_WINDOW_SHOW "show() -> None\nShow the window"
#define DOC_SDL2_VIDEO_WINDOW_FOCUS "focus(input_only=False) -> None\nSet the window to be focused"
#define DOC_SDL2_VIDEO_WINDOW_RESTORE "restore() -> None\nRestore the size and position of a minimized or maximized window"
#define DOC_SDL2_VIDEO_WINDOW_MAXIMIZE "maximize() -> None\nMaximize the window"
#define DOC_SDL2_VIDEO_WINDOW_MINIMIZE "maximize() -> None\nMinimize the window"
#define DOC_SDL2_VIDEO_WINDOW_GETRESIZABLE "get_resizable() -> bool\nGet whether the window is resizable"
#define DOC_SDL2_VIDEO_WINDOW_SETRESIZABLE "set_resizable(enabled) -> bool\nSet whether the window is resizable"
#define DOC_SDL2_VIDEO_WINDOW_GETBORDERLESS "get_borderless() -> bool\nGet whether the window is borderless"
#define DOC_SDL2_VIDEO_WINDOW_SETBORDERLESS "set_borderless(enabled) -> bool\nSet whether the window is borderless"
#define DOC_SDL2_VIDEO_WINDOW_SETICON "set_icon(surface) -> None\nSet the icon for the window"
#define DOC_SDL2_VIDEO_WINDOW_GETWINDOWID "get_window_id() -> int\nGet the unique window ID"
#define DOC_SDL2_VIDEO_WINDOW_GETSIZE "get_size() -> (int, int)\nGet the window size"
#define DOC_SDL2_VIDEO_WINDOW_SETSIZE "set_size(size) -> None\nSet the window size"
#define DOC_SDL2_VIDEO_WINDOW_GETPOSITION "get_position() -> (int, int)\nGet the window's screen position"
#define DOC_SDL2_VIDEO_WINDOW_SETPOSITION "set_position(position) -> None\nSet the window's screen position"
#define DOC_SDL2_VIDEO_WINDOW_GETOPACITY "get_opacity() -> float\nGet the window opacity"
#define DOC_SDL2_VIDEO_WINDOW_SETOPACITY "set_opacity(opacity) -> None\nSet the window opacity"
#define DOC_SDL2_VIDEO_WINDOW_GETDISPLAYINDEX "get_display_index() -> int\nGet the index of the display that owns the window"
#define DOC_SDL2_VIDEO_WINDOW_SETMODALFOR "set_modal_for(Window) -> None\nSet the window as a modal for a parent window"
#define DOC_SDL2_VIDEO_TEXTURE "Texture(renderer, size, depth=0, static=False, streaming=False, target=False, scale_quality=None) -> Texture\npygame object that represents a texture"
#define DOC_SDL2_VIDEO_TEXTURE_FROMSURFACE "from_surface(renderer, surface) -> Texture\nCreate a texture from an existing surface"
#define DOC_SDL2_VIDEO_TEXTURE_GETWIDTH "get_width() -> int\nGet the width of the Texture"
#define DOC_SDL2_VIDEO_TEXTURE_GETHEIGHT "get_height() -> int\nGet the height of the Texture"
#define DOC_SDL2_VIDEO_TEXTURE_GETRECT "get_rect(**kwargs) -> Rect\nGet the rectangular area of the texture"
#define DOC_SDL2_VIDEO_TEXTURE_GETALPHA "get_alpha() -> int\nGet the additional alpha value multiplied into draw operations"
#define DOC_SDL2_VIDEO_TEXTURE_SETALPHA "set_alpha(alpha) -> None\nSet a additional alpha value multiplied into draw operations."
#define DOC_SDL2_VIDEO_TEXTURE_GETBLENDMODE "get_blend_mode() -> int\nGet the blend mode used for texture drawing operations"
#define DOC_SDL2_VIDEO_TEXTURE_SETBLENDMODE "set_blend_mode(blend_mode) -> None\nSet the blend mode used for texture drawing operations"
#define DOC_SDL2_VIDEO_TEXTURE_GETCOLOR "get_color() -> Color\nGet the additional color value multiplied into texture drawing operations"
#define DOC_SDL2_VIDEO_TEXTURE_SETCOLOR "set_color(color) -> None\nSet an additional color value multiplied into texture drawing operations"
#define DOC_SDL2_VIDEO_TEXTURE_DRAW "draw(srcrect=None, dstrect=None, angle=0, origin=None, flip_x=False, flip_y=False) -> None\nCopy a portion of the texture to the rendering target"
#define DOC_SDL2_VIDEO_TEXTURE_GETRENDERER "renderer -> Renderer\nGet the renderer associated with the Texture"
#define DOC_SDL2_VIDEO_TEXTURE_DRAWTRIANGLE "draw_triangle(p1_xy, p2_xy, p3_xy, p1_uv=(0.0, 0.0), p2_uv=(1.0, 1.0), p3_uv=(0.0, 1.0), p1_mod=(255, 255, 255, 255), p2_mod=(255, 255, 255, 255), p3_mod=(255, 255, 255, 255)) -> None\nCopy a triangle portion of the texture to the rendering target using the given coordinates"
#define DOC_SDL2_VIDEO_TEXTURE_DRAWQUAD "draw_quad(p1_xy, p2_xy, p3_xy, p4_xy, p1_uv=(0.0, 0.0), p2_uv=(1.0, 0.0), p3_uv=(1.0, 1.0), p4_uv=(0.0, 1.0), p1_mod=(255, 255, 255, 255), p2_mod=(255, 255, 255, 255), p3_mod=(255, 255, 255, 255), p4_mod=(255, 255, 255, 255)) -> None\nCopy a quad portion of the texture to the rendering target using the given coordinates"
#define DOC_SDL2_VIDEO_TEXTURE_UPDATE "update(surface, area=None) -> None\nUpdate the texture with Surface (WARNING: Slow operation, use sparingly)"
#define DOC_SDL2_VIDEO_IMAGE "Image(texture_or_image, srcrect=None) -> Image\npygame object that represents a portion of a texture"
#define DOC_SDL2_VIDEO_IMAGE_GETORIGIN "get_origin() -> (float, float) or None\nGet the Image's origin of rotation"
#define DOC_SDL2_VIDEO_IMAGE_SETORIGIN "set_origin(origin) -> None\nSet the Image's origin of rotation"
#define DOC_SDL2_VIDEO_IMAGE_GETRECT "get_rect() -> Rect\nGet the rectangular area of the Image"
#define DOC_SDL2_VIDEO_IMAGE_DRAW "draw(srcrect=None, dstrect=None) -> None\nCopy a portion of the Image to the rendering target."
#define DOC_SDL2_VIDEO_IMAGE_ANGLE "angle -> float\nGets and sets the angle the Image draws itself with."
#define DOC_SDL2_VIDEO_IMAGE_FLIPX "flip_x -> bool\nGets and sets whether the Image is flipped on the x axis."
#define DOC_SDL2_VIDEO_IMAGE_FLIPY "flip_y -> bool\nGets and sets whether the Image is flipped on the y axis."
#define DOC_SDL2_VIDEO_IMAGE_GETCOLOR "get_color() -> Color\nGet the Image color modifier"
#define DOC_SDL2_VIDEO_IMAGE_SETCOLOR "set_color(color) -> None\nSet the Image color modifier"
#define DOC_SDL2_VIDEO_IMAGE_GETALPHA "get_alpha() -> int\nGet the Image alpha modifier"
#define DOC_SDL2_VIDEO_IMAGE_SETALPHA "set_alpha(alpha) -> None\nSet the Image alpha modifier"
#define DOC_SDL2_VIDEO_IMAGE_GETBLENDMODE "get_blend_mode() -> int\nGet the Image blend mode modifier"
#define DOC_SDL2_VIDEO_IMAGE_SETBLENDMODE "set_blend_mode(blend_mode) -> None\nSet the Image blend mode modifier"
#define DOC_SDL2_VIDEO_IMAGE_TEXTURE "texture -> Texture\nGets and sets the Texture the Image is based on."
#define DOC_SDL2_VIDEO_IMAGE_SRCRECT "srcrect -> Rect\nGets and sets the Rect the Image is based on."
#define DOC_SDL2_VIDEO_RENDERER "Renderer(window, index=-1, accelerated=-1, vsync=False, target_texture=False) -> Renderer\npygame object wrapping a 2D rendering context for a window"
#define DOC_SDL2_VIDEO_RENDERER_FROMWINDOW "from_window(window) -> Renderer\nCreate a Renderer from an existing window"
#define DOC_SDL2_VIDEO_RENDERER_GETDRAWBLENDMODE "get_draw_blend_mode() -> int\nGet the blend mode used for primitive drawing operations"
#define DOC_SDL2_VIDEO_RENDERER_SETDRAWBLENDMODE "set_draw_blend_mode(blend_mode) -> None\nSet the blend mode used for primitive drawing operations"
#define DOC_SDL2_VIDEO_RENDERER_GETDRAWCOLOR "get_draw_color() -> Color\nGet the draw color used for primitive drawing operations"
#define DOC_SDL2_VIDEO_RENDERER_SETDRAWCOLOR "set_draw_color(color) -> None\nSet the draw color used for primitive drawing operations"
#define DOC_SDL2_VIDEO_RENDERER_CLEAR "clear() -> None\nClear the current rendering target with the draw color"
#define DOC_SDL2_VIDEO_RENDERER_PRESENT "present() -> None\nUpdate the screen with any rendering performed since the previous call"
#define DOC_SDL2_VIDEO_RENDERER_GETVIEWPORT "get_viewport() -> Rect\nGet the drawing area on the rendering target"
#define DOC_SDL2_VIDEO_RENDERER_SETVIEWPORT "set_viewport(area) -> None\nSet the drawing area on the rendering target"
#define DOC_SDL2_VIDEO_RENDERER_GETLOGICALSIZE "get_logical_size() -> (int, int)\nGet the logical Renderer size (a device independent resolution for rendering)"
#define DOC_SDL2_VIDEO_RENDERER_SETLOGICALSIZE "set_logical_size(size) -> None\nSet the logical Renderer size (a device independent resolution for rendering)"
#define DOC_SDL2_VIDEO_RENDERER_GETSCALE "get_scale() -> (float, float)\nGet the drawing scale for the current rendering target"
#define DOC_SDL2_VIDEO_RENDERER_SETSCALE "set_scale(scale) -> None\nSet the drawing scale for the current rendering target"
#define DOC_SDL2_VIDEO_RENDERER_GETTARGET "get_target() -> Texture or None\nGet the current rendering target"
#define DOC_SDL2_VIDEO_RENDERER_SETTARGET "set_target(target) -> None\nSet the current rendering target"
#define DOC_SDL2_VIDEO_RENDERER_BLIT "blit(source, dest, area=None, special_flags=0)-> Rect\nDraw textures using a Surface-like method"
#define DOC_SDL2_VIDEO_RENDERER_DRAWLINE "draw_line(p1, p2) -> None\nDraws a line."
#define DOC_SDL2_VIDEO_RENDERER_DRAWPOINT "draw_point(point) -> None\nDraws a point."
#define DOC_SDL2_VIDEO_RENDERER_DRAWRECT "draw_rect(rect)-> None\nDraws a rectangle."
#define DOC_SDL2_VIDEO_RENDERER_FILLRECT "fill_rect(rect)-> None\nFills a rectangle."
#define DOC_SDL2_VIDEO_RENDERER_TOSURFACE "to_surface(surface=None, area=None)-> Surface\nRead pixels from current rendering target and create a Surface (WARNING: Slow operation, use sparingly)"
#define DOC_SDL2_VIDEO_RENDERER_DRAWTRIANGLE "draw_triangle(p1, p2, p3) -> None\nDraw a triangle"
#define DOC_SDL2_VIDEO_RENDERER_FILLTRIANGLE "fill_triangle(p1, p2, p3) -> None\nFill a triangle"
#define DOC_SDL2_VIDEO_RENDERER_DRAWQUAD "draw_quad(p1, p2, p3, p4) -> None\nDraw a quad"
#define DOC_SDL2_VIDEO_RENDERER_FILLQUAD "fill_quad(p1, p2, p3, p4) -> None\nFill a quad"
#define DOC_SDL2_VIDEO_RENDERER_COMPOSECUSTOMBLENDMODE "compose_custom_blend_mode(color_mode, alpha_mode) -> int\nCompose a custom blend mode"
