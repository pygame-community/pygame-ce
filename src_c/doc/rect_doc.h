/* Auto generated file: with makeref.py .  Docs go in docs/reST/ref/ . */
#define DOC_RECT "Rect(left, top, width, height) -> Rect\nRect((left, top), (width, height)) -> Rect\nRect(object) -> Rect\nFRect(left, top, width, height) -> FRect\nFRect((left, top), (width, height)) -> FRect\nFRect(object) -> FRect\npygame object for storing rectangular coordinates"
#define DOC_RECT_COPY "copy() -> Rect\ncopy the rectangle"
#define DOC_RECT_MOVE "move(x, y) -> Rect\nmoves the rectangle"
#define DOC_RECT_MOVEIP "move_ip(x, y) -> None\nmoves the rectangle, in place"
#define DOC_RECT_INFLATE "inflate(x, y) -> Rect\ngrow or shrink the rectangle size"
#define DOC_RECT_INFLATEIP "inflate_ip(x, y) -> None\ngrow or shrink the rectangle size, in place"
#define DOC_RECT_UPDATE "update(left, top, width, height) -> None\nupdate((left, top), (width, height)) -> None\nupdate(object) -> None\nsets the position and size of the rectangle"
#define DOC_RECT_CLAMP "clamp(Rect) -> Rect\nmoves the rectangle inside another"
#define DOC_RECT_CLAMPIP "clamp_ip(Rect) -> None\nmoves the rectangle inside another, in place"
#define DOC_RECT_CLIP "clip(Rect) -> Rect\ncrops a rectangle inside another"
#define DOC_RECT_CLIPLINE "clipline(x1, y1, x2, y2) -> ((cx1, cy1), (cx2, cy2))\nclipline(x1, y1, x2, y2) -> ()\nclipline((x1, y1), (x2, y2)) -> ((cx1, cy1), (cx2, cy2))\nclipline((x1, y1), (x2, y2)) -> ()\nclipline((x1, y1, x2, y2)) -> ((cx1, cy1), (cx2, cy2))\nclipline((x1, y1, x2, y2)) -> ()\nclipline(((x1, y1), (x2, y2))) -> ((cx1, cy1), (cx2, cy2))\nclipline(((x1, y1), (x2, y2))) -> ()\ncrops a line inside a rectangle"
#define DOC_RECT_UNION "union(Rect) -> Rect\njoins two rectangles into one"
#define DOC_RECT_UNIONIP "union_ip(Rect) -> None\njoins two rectangles into one, in place"
#define DOC_RECT_UNIONALL "unionall(Rect_sequence) -> Rect\nthe union of many rectangles"
#define DOC_RECT_UNIONALLIP "unionall_ip(Rect_sequence) -> None\nthe union of many rectangles, in place"
#define DOC_RECT_FIT "fit(Rect) -> Rect\nresize and move a rectangle with aspect ratio"
#define DOC_RECT_NORMALIZE "normalize() -> None\ncorrect negative sizes"
#define DOC_RECT_CONTAINS "contains(Rect) -> bool\ntest if one rectangle is inside another"
#define DOC_RECT_COLLIDEPOINT "collidepoint(x, y) -> bool\ncollidepoint((x,y)) -> bool\ntest if a point is inside a rectangle"
#define DOC_RECT_COLLIDERECT "colliderect(Rect) -> bool\ntest if two rectangles overlap"
#define DOC_RECT_COLLIDELIST "collidelist(list) -> index\ntest if one rectangle in a list intersects"
#define DOC_RECT_COLLIDELISTALL "collidelistall(list) -> indices\ntest if all rectangles in a list intersect"
#define DOC_RECT_COLLIDEOBJECTS "collideobjects(rect_list) -> object\ncollideobjects(obj_list, key=func) -> object\ntest if any object in a list intersects"
#define DOC_RECT_COLLIDEOBJECTSALL "collideobjectsall(rect_list) -> objects\ncollideobjectsall(obj_list, key=func) -> objects\ntest if all objects in a list intersect"
#define DOC_RECT_COLLIDEDICT "collidedict(dict) -> (key, value)\ncollidedict(dict) -> None\ncollidedict(dict, use_values=0) -> (key, value)\ncollidedict(dict, use_values=0) -> None\ntest if one rectangle in a dictionary intersects"
#define DOC_RECT_COLLIDEDICTALL "collidedictall(dict) -> [(key, value), ...]\ncollidedictall(dict, use_values=0) -> [(key, value), ...]\ntest if all rectangles in a dictionary intersect"
