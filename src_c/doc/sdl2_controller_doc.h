/* Auto generated file: with makeref.py .  Docs go in docs/reST/ref/ . */
#define DOC_SDL2_CONTROLLER "Pygame module to work with controllers."
#define DOC_SDL2_CONTROLLER_INIT "init() -> None\ninitialize the controller module"
#define DOC_SDL2_CONTROLLER_QUIT "quit() -> None\nUninitialize the controller module."
#define DOC_SDL2_CONTROLLER_GETINIT "get_init() -> bool\nReturns True if the controller module is initialized."
#define DOC_SDL2_CONTROLLER_SETEVENTSTATE "set_eventstate(state) -> None\nSets the current state of events related to controllers"
#define DOC_SDL2_CONTROLLER_GETEVENTSTATE "get_eventstate() -> bool\nGets the current state of events related to controllers"
#define DOC_SDL2_CONTROLLER_GETCOUNT "get_count() -> int\nGet the number of joysticks connected"
#define DOC_SDL2_CONTROLLER_ISCONTROLLER "is_controller(index) -> bool\nCheck if the given joystick is supported by the game controller interface"
#define DOC_SDL2_CONTROLLER_NAMEFORINDEX "name_forindex(index) -> name or None\nGet the name of the controller"
#define DOC_SDL2_CONTROLLER_CONTROLLER "Controller(index) -> Controller\nCreate a new Controller object."
#define DOC_SDL2_CONTROLLER_CONTROLLER_QUIT "quit() -> None\nuninitialize the Controller"
#define DOC_SDL2_CONTROLLER_CONTROLLER_GETINIT "get_init() -> bool\ncheck if the Controller is initialized"
#define DOC_SDL2_CONTROLLER_CONTROLLER_FROMJOYSTICK "from_joystick(joystick) -> Controller\nCreate a Controller from a pygame.joystick.Joystick object"
#define DOC_SDL2_CONTROLLER_CONTROLLER_ATTACHED "attached() -> bool\nCheck if the Controller has been opened and is currently connected."
#define DOC_SDL2_CONTROLLER_CONTROLLER_ASJOYSTICK "as_joystick() -> Joystick object\nReturns a pygame.joystick.Joystick() object"
#define DOC_SDL2_CONTROLLER_CONTROLLER_GETAXIS "get_axis(axis) -> int\nGet the current state of a joystick axis"
#define DOC_SDL2_CONTROLLER_CONTROLLER_GETBUTTON "get_button(button) -> bool\nGet the current state of a button"
#define DOC_SDL2_CONTROLLER_CONTROLLER_GETMAPPING "get_mapping() -> mapping\nGet the mapping assigned to the controller"
#define DOC_SDL2_CONTROLLER_CONTROLLER_SETMAPPING "set_mapping(mapping) -> int\nAssign a mapping to the controller"
#define DOC_SDL2_CONTROLLER_CONTROLLER_RUMBLE "rumble(low_frequency, high_frequency, duration) -> bool\nStart a rumbling effect"
#define DOC_SDL2_CONTROLLER_CONTROLLER_STOPRUMBLE "stop_rumble() -> None\nStop any rumble effect playing"
