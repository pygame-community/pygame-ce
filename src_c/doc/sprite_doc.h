/* Auto generated file: with makeref.py .  Docs go in docs/reST/ref/ . */
#define DOC_SPRITE "pygame module with basic game object classes"
#define DOC_SPRITE_SPRITE "Sprite(*groups) -> Sprite\nSimple base class for visible game objects."
#define DOC_SPRITE_SPRITE_UPDATE "update(*args, **kwargs) -> None\nmethod to control sprite behavior"
#define DOC_SPRITE_SPRITE_ADD "add(*groups) -> None\nadd the sprite to groups"
#define DOC_SPRITE_SPRITE_REMOVE "remove(*groups) -> None\nremove the sprite from groups"
#define DOC_SPRITE_SPRITE_KILL "kill() -> None\nremove the Sprite from all Groups"
#define DOC_SPRITE_SPRITE_ALIVE "alive() -> bool\ndoes the sprite belong to any groups"
#define DOC_SPRITE_SPRITE_GROUPS "groups() -> group_list\nlist of Groups that contain this Sprite"
#define DOC_SPRITE_DIRTYSPRITE "DirtySprite(*groups) -> DirtySprite\nA subclass of Sprite with more attributes and features."
#define DOC_SPRITE_GROUP "Group(*sprites) -> Group\nA container class to hold and manage multiple Sprite objects."
#define DOC_SPRITE_GROUP_SPRITES "sprites() -> sprite_list\nlist of the Sprites this Group contains"
#define DOC_SPRITE_GROUP_COPY "copy() -> Group\nduplicate the Group"
#define DOC_SPRITE_GROUP_ADD "add(*sprites) -> None\nadd Sprites to this Group"
#define DOC_SPRITE_GROUP_REMOVE "remove(*sprites) -> None\nremove Sprites from the Group"
#define DOC_SPRITE_GROUP_HAS "has(*sprites) -> bool\ntest if a Group contains Sprites"
#define DOC_SPRITE_GROUP_UPDATE "update(*args, **kwargs) -> None\ncall the update method on contained Sprites"
#define DOC_SPRITE_GROUP_DRAW "draw(Surface) -> List[Rect]\nblit the Sprite images"
#define DOC_SPRITE_GROUP_CLEAR "clear(Surface_dest, background) -> None\ndraw a background over the Sprites"
#define DOC_SPRITE_GROUP_EMPTY "empty() -> None\nremove all Sprites"
#define DOC_SPRITE_RENDERPLAIN "Same as pygame.sprite.Group"
#define DOC_SPRITE_RENDERCLEAR "Same as pygame.sprite.Group"
#define DOC_SPRITE_RENDERUPDATES "RenderUpdates(*sprites) -> RenderUpdates\nGroup sub-class that tracks dirty updates."
#define DOC_SPRITE_RENDERUPDATES_DRAW "draw(surface) -> Rect_list\nblit the Sprite images and track changed areas"
#define DOC_SPRITE_ORDEREDUPDATES "OrderedUpdates(*sprites) -> OrderedUpdates\nRenderUpdates sub-class that draws Sprites in order of addition."
#define DOC_SPRITE_LAYEREDUPDATES "LayeredUpdates(*sprites, **kwargs) -> LayeredUpdates\nLayeredUpdates is a sprite group that handles layers and draws like OrderedUpdates."
#define DOC_SPRITE_LAYEREDUPDATES_ADD "add(*sprites, **kwargs) -> None\nadd a sprite or sequence of sprites to a group"
#define DOC_SPRITE_LAYEREDUPDATES_SPRITES "sprites() -> sprites\nreturns a ordered list of sprites (first back, last top)."
#define DOC_SPRITE_LAYEREDUPDATES_DRAW "draw(surface) -> Rect_list\ndraw all sprites in the right order onto the passed surface."
#define DOC_SPRITE_LAYEREDUPDATES_GETSPRITESAT "get_sprites_at(pos) -> colliding_sprites\nreturns a list with all sprites at that position."
#define DOC_SPRITE_LAYEREDUPDATES_GETSPRITE "get_sprite(idx) -> sprite\nreturns the sprite at the index idx from the groups sprites"
#define DOC_SPRITE_LAYEREDUPDATES_REMOVESPRITESOFLAYER "remove_sprites_of_layer(layer_nr) -> sprites\nremoves all sprites from a layer and returns them as a list."
#define DOC_SPRITE_LAYEREDUPDATES_LAYERS "layers() -> layers\nreturns a list of layers defined (unique), sorted from bottom up."
#define DOC_SPRITE_LAYEREDUPDATES_CHANGELAYER "change_layer(sprite, new_layer) -> None\nchanges the layer of the sprite"
#define DOC_SPRITE_LAYEREDUPDATES_GETLAYEROFSPRITE "get_layer_of_sprite(sprite) -> layer\nreturns the layer that sprite is currently in."
#define DOC_SPRITE_LAYEREDUPDATES_GETTOPLAYER "get_top_layer() -> layer\nreturns the top layer"
#define DOC_SPRITE_LAYEREDUPDATES_GETBOTTOMLAYER "get_bottom_layer() -> layer\nreturns the bottom layer"
#define DOC_SPRITE_LAYEREDUPDATES_MOVETOFRONT "move_to_front(sprite) -> None\nbrings the sprite to front layer"
#define DOC_SPRITE_LAYEREDUPDATES_MOVETOBACK "move_to_back(sprite) -> None\nmoves the sprite to the bottom layer"
#define DOC_SPRITE_LAYEREDUPDATES_GETTOPSPRITE "get_top_sprite() -> Sprite\nreturns the topmost sprite"
#define DOC_SPRITE_LAYEREDUPDATES_GETSPRITESFROMLAYER "get_sprites_from_layer(layer) -> sprites\nreturns all sprites from a layer, ordered by how they where added"
#define DOC_SPRITE_LAYEREDUPDATES_SWITCHLAYER "switch_layer(layer1_nr, layer2_nr) -> None\nswitches the sprites from layer1 to layer2"
#define DOC_SPRITE_LAYEREDDIRTY "LayeredDirty(*sprites, **kwargs) -> LayeredDirty\nLayeredDirty group is for DirtySprite objects.  Subclasses LayeredUpdates."
#define DOC_SPRITE_LAYEREDDIRTY_DRAW "draw(surface, bgd=None) -> Rect_list\ndraw all sprites in the right order onto the passed surface."
#define DOC_SPRITE_LAYEREDDIRTY_CLEAR "clear(surface, bgd) -> None\nused to set background"
#define DOC_SPRITE_LAYEREDDIRTY_REPAINTRECT "repaint_rect(screen_rect) -> None\nrepaints the given area"
#define DOC_SPRITE_LAYEREDDIRTY_SETCLIP "set_clip(screen_rect=None) -> None\nclip the area where to draw. Just pass None (default) to reset the clip"
#define DOC_SPRITE_LAYEREDDIRTY_GETCLIP "get_clip() -> Rect\nclip the area where to draw. Just pass None (default) to reset the clip"
#define DOC_SPRITE_LAYEREDDIRTY_CHANGELAYER "change_layer(sprite, new_layer) -> None\nchanges the layer of the sprite"
#define DOC_SPRITE_LAYEREDDIRTY_SETTIMINGTRESHOLD "set_timing_treshold(time_ms) -> None\nsets the threshold in milliseconds"
#define DOC_SPRITE_LAYEREDDIRTY_SETTIMINGTHRESHOLD "set_timing_threshold(time_ms) -> None\nsets the threshold in milliseconds"
#define DOC_SPRITE_GROUPSINGLE "GroupSingle(sprite=None) -> GroupSingle\nGroup container that holds a single sprite."
#define DOC_SPRITE_SPRITECOLLIDE "spritecollide(sprite, group, dokill, collided = None) -> Sprite_list\nFind sprites in a group that intersect another sprite."
#define DOC_SPRITE_COLLIDERECT "collide_rect(left, right) -> bool\nCollision detection between two sprites, using rects."
#define DOC_SPRITE_COLLIDERECTRATIO "collide_rect_ratio(ratio) -> collided_callable\nCollision detection between two sprites, using rects scaled to a ratio."
#define DOC_SPRITE_COLLIDECIRCLE "collide_circle(left, right) -> bool\nCollision detection between two sprites, using circles."
#define DOC_SPRITE_COLLIDECIRCLERATIO "collide_circle_ratio(ratio) -> collided_callable\nCollision detection between two sprites, using circles scaled to a ratio."
#define DOC_SPRITE_COLLIDEMASK "collide_mask(sprite1, sprite2) -> (int, int)\ncollide_mask(sprite1, sprite2) -> None\nCollision detection between two sprites, using masks."
#define DOC_SPRITE_GROUPCOLLIDE "groupcollide(group1, group2, dokill1, dokill2, collided = None) -> Sprite_dict\nFind all sprites that collide between two groups."
#define DOC_SPRITE_SPRITECOLLIDEANY "spritecollideany(sprite, group, collided = None) -> Sprite\nspritecollideany(sprite, group, collided = None) -> None\nSimple test if a sprite intersects anything in a group."
