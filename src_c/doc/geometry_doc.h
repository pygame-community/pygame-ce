/* Auto generated file: with makeref.py .  Docs go in docs/reST/ref/ . */
#define DOC_GEOMETRY "pygame module for the Circle, Line, and Polygon objects"
#define DOC_CIRCLE "Circle((x, y), radius) -> Circle\nCircle(x, y, radius) -> Circle\npygame object for representing a circle"
#define DOC_CIRCLE_X "x -> float\ncenter x coordinate of the circle"
#define DOC_CIRCLE_Y "y -> float\ncenter y coordinate of the circle"
#define DOC_CIRCLE_R "r -> float\nradius of the circle"
#define DOC_CIRCLE_RSQR "r_sqr -> float\nradius of the circle squared"
#define DOC_CIRCLE_CENTER "center -> (float, float)\nx and y coordinates of the center of the circle"
#define DOC_CIRCLE_DIAMETER "diameter -> float\ndiameter of the circle"
#define DOC_CIRCLE_AREA "area -> float\narea of the circle"
#define DOC_CIRCLE_CIRCUMFERENCE "circumference -> float\ncircumference of the circle"
#define DOC_CIRCLE_COLLIDEPOINT "collidepoint((x, y)) -> bool\ncollidepoint(x, y) -> bool\ncollidepoint(Vector2) -> bool\ntest if a point is inside the circle"
#define DOC_CIRCLE_COLLIDECIRCLE "collidecircle(Circle) -> bool\ncollidecircle(x, y, radius) -> bool\ncollidecircle((x, y), radius) -> bool\ntest if two circles collide"
#define DOC_CIRCLE_COLLIDERECT "colliderect(Rect) -> bool\ncolliderect((x, y, width, height)) -> bool\ncolliderect(x, y, width, height) -> bool\ncolliderect((x, y), (width, height)) -> bool\nchecks if a rectangle intersects the circle"
#define DOC_CIRCLE_UPDATE "update((x, y), radius) -> None\nupdate(x, y, radius) -> None\nupdates the circle position and radius"
#define DOC_CIRCLE_COPY "copy() -> Circle\nreturns a copy of the circle"
