/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_TRANSFORM "Pygame module to transform surfaces."
#define DOC_TRANSFORM_FLIP "flip(surface, flip_x, flip_y) -> Surface\nFlip vertically and horizontally."
#define DOC_TRANSFORM_SCALE "scale(surface, size, dest_surface=None) -> Surface\nResize to new resolution."
#define DOC_TRANSFORM_SCALEBY "scale_by(surface, factor, dest_surface=None) -> Surface\nResize to new resolution, using scalar(s)."
#define DOC_TRANSFORM_ROTATE "rotate(surface, angle) -> Surface\nRotate an image."
#define DOC_TRANSFORM_ROTOZOOM "rotozoom(surface, angle, scale) -> Surface\nFiltered scale and rotation."
#define DOC_TRANSFORM_SCALE2X "scale2x(surface, dest_surface=None) -> Surface\nSpecialized image doubler."
#define DOC_TRANSFORM_SMOOTHSCALE "smoothscale(surface, size, dest_surface=None) -> Surface\nScale a surface to an arbitrary size smoothly."
#define DOC_TRANSFORM_SMOOTHSCALEBY "smoothscale_by(surface, factor, dest_surface=None) -> Surface\nResize to new resolution, using scalar(s)."
#define DOC_TRANSFORM_GETSMOOTHSCALEBACKEND "get_smoothscale_backend() -> Literal['GENERIC', 'SSE2', 'NEON']\nReturn smoothscale filter version in use: 'GENERIC', 'MMX', 'SSE', 'SSE2', or 'NEON'."
#define DOC_TRANSFORM_SETSMOOTHSCALEBACKEND "set_smoothscale_backend(backend) -> None\nSet smoothscale filter version to one of: 'GENERIC', 'MMX', 'SSE', 'SSE2', or 'NEON'."
#define DOC_TRANSFORM_CHOP "chop(surface, rect) -> Surface\nGets a copy of an image with an interior area removed."
#define DOC_TRANSFORM_LAPLACIAN "laplacian(surface, dest_surface=None) -> Surface\nFind edges in a surface."
#define DOC_TRANSFORM_BOXBLUR "box_blur(surface, radius, repeat_edge_pixels=True, dest_surface=None) -> Surface\nBlur a surface using box blur."
#define DOC_TRANSFORM_GAUSSIANBLUR "gaussian_blur(surface, radius, repeat_edge_pixels=True, dest_surface=None) -> Surface\nBlur a surface using gaussian blur."
#define DOC_TRANSFORM_AVERAGESURFACES "average_surfaces(surfaces, dest_surface=None, palette_colors=1) -> Surface\nFind the average surface from many surfaces."
#define DOC_TRANSFORM_AVERAGECOLOR "average_color(surface, rect=None, consider_alpha=False) -> tuple[int, int, int, int]\nFinds the average color of a surface."
#define DOC_TRANSFORM_INVERT "invert(surface, dest_surface=None) -> Surface\nInverts the RGB elements of a surface."
#define DOC_TRANSFORM_GRAYSCALE "grayscale(surface, dest_surface=None) -> Surface\nGrayscale a surface."
#define DOC_TRANSFORM_SOLIDOVERLAY "solid_overlay(surface, color, dest_surface=None, keep_alpha=False) -> Surface\nReplaces non transparent pixels with the provided color."
#define DOC_TRANSFORM_THRESHOLD "threshold(dest_surface, surface, search_color, threshold=(0, 0, 0, 0), set_color=(0, 0, 0, 0), set_behavior=1, search_surf=None, inverse_set=False) -> int\nFinds which, and how many pixels in a surface are within a threshold of a 'search_color' or a 'search_surf'."
#define DOC_TRANSFORM_HSL "hsl(surface, hue=0, saturation=0, lightness=0, dest_surface=None) -> Surface\nChange the hue, saturation, and lightness of a surface."
