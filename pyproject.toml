[project]
name = "pygame-ce"
version = "2.5.2.dev1"
description = "Python Game Development"
readme = "README.rst" # for long description
requires-python = ">=3.8"
license = {text = "LGPL v2.1"}
authors = [{name = "A community project"}]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)",
    "Programming Language :: Assembly",
    "Programming Language :: C",
    "Programming Language :: Cython",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Games/Entertainment",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: Multimedia :: Sound/Audio :: MIDI",
    "Topic :: Multimedia :: Sound/Audio :: Players",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Multimedia :: Graphics :: Capture :: Digital Camera",
    "Topic :: Multimedia :: Graphics :: Capture :: Screen Capture",
    "Topic :: Multimedia :: Graphics :: Graphics Conversion",
    "Topic :: Multimedia :: Graphics :: Viewers",
    "Topic :: Software Development :: Libraries :: pygame",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Typing :: Typed"
]

[project.urls]
homepage = "https://pyga.me"
"Bug Reports" = "https://github.com/pygame-community/pygame-ce/issues"
"Documentation" = "https://pyga.me/docs"
"Release Notes" = "https://github.com/pygame-community/pygame-ce/releases"
"Source" = "https://github.com/pygame-community/pygame-ce"

[project.entry-points.pyinstaller40]
hook-dirs = 'pygame.__pyinstaller:get_hook_dirs'

[project.entry-points."briefcase.bootstraps"]
pygame_ce = 'pygame.__briefcase.pygame_ce:PygameCEGuiBootstrap'

[build-system]
requires = [
  "meson-python<=0.16.0",
  "meson<=1.5.1",
  "ninja<=1.11.1.1",
  "cython<=3.0.11",
  "sphinx<=7.2.6",
]
build-backend = 'mesonpy'

[tool.meson-python.args]
install = ['--tags=runtime,python-runtime,pg-tag']
# uncomment to get werror locally
# setup = ["-Derror_on_warns=true"]

[tool.cibuildwheel]
# The default build-frontend is "pip", but we use the recommended "build" frontend.
# build (AKA pypa/build) is a simple tool that just focusses on one thing: building
# wheels. build still needs to interact with a pip-like tool to handle build-time
# dependencies. Here is where uv comes into the picture. It is an "installer" like pip,
# but faster. It has been observed to save a couple of minutes of CI time.
build-frontend = "build[uv]"
build = "cp3{8,9,10,11,12,13}-* pp3{8,9,10}-*"
skip = "*-musllinux_*"
# build[uv] is verbose by default, so below flag is not needed here
# build-verbosity = 3

environment = { SDL_VIDEODRIVER="dummy", SDL_AUDIODRIVER="disk" }
test-command = "python -m pygame.tests -v --exclude opengl,music,timing --time_out 300"
test-requires = ["numpy"]

[tool.cibuildwheel.config-settings]
setup-args = [
    "-Derror_on_warns=true",
    "-Dvsenv=true",  # same effect as passing --vsenv
    "-Derror_docs_missing=true",
]

[tool.ruff]
exclude = [
  "buildconfig/",
  "docs/reST/",
  "setup.py",
]

[tool.ruff.format]
quote-style = "preserve"

# numpy is a test dependency, but we build for systems that numpy doesn't have
# binary wheels for. In such cases, we do not want to waste CI time building
# numpy from source. So, we are gonna force numpy to be "only-binary" and skip
# numpy on platforms that it doesn't have wheels for
[tool.uv.pip]
only-binary = ["numpy"]

# 1. skip all 32-bit manylinux (i686)
# 2. skip all pypy+arm combinations
[[tool.cibuildwheel.overrides]]
select = "{*-manylinux_i686,pp*-*{arm64,aarch64}}"
test-requires = []
